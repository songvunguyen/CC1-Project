import numpy as np
import json
from os.path import dirname
import os
NUM_PRINT_TERMS = 15
# np.set_printoptions(threshold='nan')

NEURO_VOCAB_PATH = "C:\\Users\\sivar\\Downloads\\files\\neuro_vocab.txt"
NEURO_DATASETS_PATH = "C:\\Users\\sivar\\Downloads\\files\\neuro_datasets.txt"
NEURO_TOOLS_PATH = "C:\\Users\\sivar\\Downloads\\files\\neuro_tools.txt"
MODELS_FOLDER="C:\\Users\\sivar\\Downloads\\python\\DXTP02122043\\DXTP02122043\\"

def lda_topic_printer(vocab_path, model_folder):
    """
    Print the topics information generated by LDA

    Parameters
    ----------
    vocab_path   : string
    model_folder : string
        the name of model file
    Returns
    -------

    """
    with open(vocab_path, 'r') as fp:
        vocabs = fp.readlines()
    vocabs = [x.strip() for x in vocabs]

    # load model file
    folder_name = MODELS_FOLDER + model_folder + '/'
    kw = np.loadtxt(folder_name + 'kw.dat')
    kd = np.loadtxt(folder_name + 'kd.dat')

    with open(folder_name + 'settings.txt', 'r') as fp:
        settings = fp.readlines()
    settings = [x.strip() for x in settings]

    for s in settings:
        if 'alpha' in s:
            alpha = float(s.split('=')[1])

        if 'beta' in s:
            beta = float(s.split('=')[1])

    num_topics = kw.shape[0]
    est_kw, est_kd = lda_pe(kw, kd, alpha, beta)

    for k in range(num_topics):
        idx = np.argsort(est_kw[k, :])[::-1][:NUM_PRINT_TERMS]

        print("topic %d:" % k)
        for x in idx:
            print('%20s  \t---\t  %.4f' % (vocabs[x], est_kw[k, x]))
        print()


def lda_doc_printer(vocab_path, model_folder, docs_info):
    """
        Print the topics proportion generated by LDA

        Parameters
        ----------
        vocab_path   : string
        model_folder : string
            the name of model file
        Returns
        -------

    """
    with open(vocab_path, 'r') as fp:
        vocabs = fp.readlines()
    vocabs = [x.strip() for x in vocabs]

    with open(docs_info, 'r') as fp:
        docs_info = json.load(fp)

    # load model file
    folder_name = MODELS_FOLDER + model_folder + '/'
    kw = np.loadtxt(folder_name + 'kw.dat')
    kd = np.loadtxt(folder_name + 'kd.dat')

    with open(folder_name + 'settings.txt', 'r') as fp:
        settings = fp.readlines()
    settings = [x.strip() for x in settings]

    for s in settings:
        if 'alpha' in s:
            alpha = float(s.split('=')[1])

        if 'beta' in s:
            beta = float(s.split('=')[1])

    est_kw, est_kd = lda_pe(kw, kd, alpha, beta)
    num_docs = kd.shape[1]

    for d in range(num_docs):
        topics = np.argsort(est_kd[:, d])[::-1][:5]

        print('Title: %s:' % docs_info[str(d)]['title'])
        for k in topics:
            print ('\t topic %s \t---\t  %.4f' % (k, est_kd[k, d]))
        print()


def dxtp_parameter_estimation(kw, kt, ks, ztot, alpha, beta):
    num_topics = kw.shape[0]
    num_vocabs = kw.shape[1]
    num_tools = kt.shape[1]
    num_datasets = ks.shape[1]

    est_kw = np.zeros((num_topics, num_vocabs))
    est_kt = np.zeros((num_topics, num_tools))
    est_ks = np.zeros((num_topics, num_datasets))

    for k in range(num_topics):
        est_kw[k, :] = (1.0 * (kw[k, :] + beta)) / (ztot[k] + num_vocabs * beta)
        est_kt[k, :] = (1.0 * (kt[k, :] + alpha)) / (np.sum(kt[k, :]) + num_tools * alpha)
        est_ks[k, :] = (1.0 * (ks[k, :] + alpha)) / (np.sum(ks[k, :]) + num_datasets * alpha)

    return est_kw, est_kt, est_ks


def dxtp_printer(model_folder, vocab_file, tool_file, dataset_file, topic_id = 0):
    """
    Print topic model for tools and datasets

    Parameters
    ----------
    model_folder : String
        model's folder name
    Returns
    -------

    """
    with open(vocab_file, 'r') as fp:
        vocabs = fp.readlines()
    vocabs = [x.strip() for x in vocabs]
    fp.close()

    with open(tool_file, 'r') as fp:
        tools = fp.readlines()
    tools = [x.strip() for x in tools]
    fp.close()

    with open(dataset_file, 'r') as fp:
        datasets = fp.readlines()
    datasets = [x.strip() for x in datasets]
    fp.close()

    # load model file
   # folder_name = MODELS_FOLDER + model_folder + '/'
   # kw = np.loadtxt(folder_name + 'kw.dat')
    kw = np.loadtxt("C:\\Users\\sivar\\Downloads\\python\\DXTP02122043\\DXTP02122043\\kw.dat")
    kt = np.loadtxt("C:\\Users\\sivar\\Downloads\\python\\DXTP02122043\\DXTP02122043\\kt.dat")
    ks = np.loadtxt("C:\\Users\\sivar\\Downloads\\python\\DXTP02122043\\DXTP02122043\\ks.dat")
    ztot = np.loadtxt("C:\\Users\\sivar\\Downloads\\python\\DXTP02122043\\DXTP02122043\\ztot.dat")

    with open("C:\\Users\\sivar\\Downloads\\python\\DXTP02122043\\DXTP02122043\\settings.txt", 'r') as fp:
        settings = fp.readlines()
    settings = [x.strip() for x in settings]

    for s in settings:
        if 'alpha' in s:
            alpha = float(s.split('=')[1])

        if 'beta' in s:
            beta = float(s.split('=')[1])

    est_kw, est_kt, est_ks = dxtp_parameter_estimation(kw, kt, ks, ztot, alpha, beta)

    num_topics = kw.shape[0]

    if topic_id == 0:
        for k in range(num_topics):
            kw_idx = np.argsort(est_kw[k, :])[::-1][:NUM_PRINT_TERMS]

            kt_idx = np.argsort(est_kt[k, :])[::-1]
            kt_idx = kt_idx[kt_idx < len(tools)][:NUM_PRINT_TERMS]

            ks_idx = np.argsort(est_ks[k, :])[::-1]
            ks_idx = ks_idx[ks_idx < len(datasets)][:NUM_PRINT_TERMS]

            print('topic %d:' % k)
            for x in range(NUM_PRINT_TERMS):
                print('%20s  \t---\t  %.4f' % (vocabs[kw_idx[x]], est_kw[k, kw_idx[x]]) + '%20s  \t---\t  %.4f' % (tools[kt_idx[x]], est_kt[k, kt_idx[x]]) + '%20s  \t---\t  %.4f' % (datasets[ks_idx[x]], est_ks[k, ks_idx[x]]))
            print()
    else:
        kw_idx = np.argsort(est_kw[topic_id, :])[::-1][:NUM_PRINT_TERMS]

        kt_idx = np.argsort(est_kt[topic_id, :])[::-1]
        kt_idx = kt_idx[kt_idx < len(tools)][:NUM_PRINT_TERMS]

        ks_idx = np.argsort(est_ks[topic_id, :])[::-1]
        ks_idx = ks_idx[ks_idx < len(datasets)][:NUM_PRINT_TERMS]

        print('topic %d:' % topic_id)
        for x in range(NUM_PRINT_TERMS):
            print('%20s  \t---\t  %.4f' % (vocabs[kw_idx[x]], est_kw[topic_id, kw_idx[x]]))
        print()


def dxtp_tool_printer(model_folder, vocab_file, tool_file, dataset_file, tool_idx):
    with open(vocab_file, 'r') as fp:
        vocabs = fp.readlines()
    vocabs = [x.strip() for x in vocabs]
    fp.close()

    with open(tool_file, 'r') as fp:
        tools = fp.readlines()
    tools = [x.strip() for x in tools]
    fp.close()

    with open(dataset_file, 'r') as fp:
        datasets = fp.readlines()
    datasets = [x.strip() for x in datasets]
    fp.close()

    # load model file
    #folder_name = MODELS_FOLDER + model_folder + '/'
    kw = np.loadtxt("C:\\Users\\sivar\\Downloads\\python\\DXTP02122043\\DXTP02122043\\kw.dat")
    kt = np.loadtxt(folder_name + 'kt.dat')
    ks = np.loadtxt(folder_name + 'ks.dat')
    ztot = np.loadtxt(folder_name + 'ztot.dat')

    with open(folder_name + 'settings.txt', 'r') as fp:
        settings = fp.readlines()
    settings = [x.strip() for x in settings]

    for s in settings:
        if 'alpha' in s:
            alpha = float(s.split('=')[1])

        if 'beta' in s:
            beta = float(s.split('=')[1])

    est_kw, est_kt, est_ks = dxtp_pe(kw, kt, ks, ztot, alpha, beta)

    num_tool = kt.shape[1]
    if tool_idx != 0:
        topic_idx = np.argsort(est_kt[:, tool_idx])[::-1]
        for i in range(3):
            print('topic %d:' % topic_idx[i])
            for x in range(NUM_PRINT_TERMS):
                kw_idx = np.argsort(est_kw[topic_idx[i], :])[::-1][:NUM_PRINT_TERMS]
                print('%20s  \t---\t  %.4f' % (vocabs[kw_idx[x]], est_kw[topic_idx[i], kw_idx[x]]))
            print()
    else:
        for t in range(num_tool):
            topic_idx = np.argsort(est_kt[:, t])[::-1]

            print('tool %d:' % t)
            for x in range(NUM_PRINT_TERMS):
                print('\t topic %s \t---\t  %.4f' % (topic_idx[x], est_kt[topic_idx[x], t]))
            print()


def dxtp_dataset_printer(model_folder, vocab_file, tool_file, dataset_file, dataset_idx):
    with open(vocab_file, 'r') as fp:
        vocabs = fp.readlines()
    vocabs = [x.strip() for x in vocabs]
    fp.close()

    with open(tool_file, 'r') as fp:
        tools = fp.readlines()
    tools = [x.strip() for x in tools]
    fp.close()

    with open(dataset_file, 'r') as fp:
        datasets = fp.readlines()
    datasets = [x.strip() for x in datasets]
    fp.close()

    # load model file
    folder_name = MODELS_FOLDER + model_folder + '/'
    kw = np.loadtxt(folder_name + 'kw.dat')
    kt = np.loadtxt(folder_name + 'kt.dat')
    ks = np.loadtxt(folder_name + 'ks.dat')
    ztot = np.loadtxt(folder_name + 'ztot.dat')

    with open(folder_name + 'settings.txt', 'r') as fp:
        settings = fp.readlines()
    settings = [x.strip() for x in settings]

    for s in settings:
        if 'alpha' in s:
            alpha = float(s.split('=')[1])

        if 'beta' in s:
            beta = float(s.split('=')[1])

    est_kw, est_kt, est_ks = dxtp_pe(kw, kt, ks, ztot, alpha, beta)

    num_dataset = ks.shape[1]
    if dataset_idx != 0:
        topic_idx = np.argsort(est_ks[:, dataset_idx])[::-1]
        for i in range(3):
            print('topic %d:' % topic_idx[i])
            for x in range(NUM_PRINT_TERMS):
                kw_idx = np.argsort(est_kw[topic_idx[i], :])[::-1][:NUM_PRINT_TERMS]
                print('%20s  \t---\t  %.4f' % (vocabs[kw_idx[x]], est_kw[topic_idx[i], kw_idx[x]]))
            print()
    else:
        for t in range(num_dataset):
            topic_idx = np.argsort(est_ks[:, t])[::-1]

            print('dataset %d:' % t)
            for x in range(NUM_PRINT_TERMS):
                print('\t topic %s \t---\t  %.4f' % (topic_idx[x], est_ks[topic_idx[x], t]))
            print()



if __name__ == '__main__':
    dxtp_printer('DXTP02122043', NEURO_VOCAB_PATH, NEURO_TOOLS_PATH, NEURO_DATASETS_PATH)
